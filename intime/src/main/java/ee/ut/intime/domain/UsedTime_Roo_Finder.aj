// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.ut.intime.domain;

import ee.ut.intime.domain.AppUser;
import ee.ut.intime.domain.UsedTime;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UsedTime_Roo_Finder {
    
    public static Long UsedTime.countFindUsedTimesByOwner(AppUser owner) {
        if (owner == null) throw new IllegalArgumentException("The owner argument is required");
        EntityManager em = UsedTime.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UsedTime AS o WHERE o.owner = :owner", Long.class);
        q.setParameter("owner", owner);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<UsedTime> UsedTime.findUsedTimesByOwner(AppUser owner) {
        if (owner == null) throw new IllegalArgumentException("The owner argument is required");
        EntityManager em = UsedTime.entityManager();
        TypedQuery<UsedTime> q = em.createQuery("SELECT o FROM UsedTime AS o WHERE o.owner = :owner", UsedTime.class);
        q.setParameter("owner", owner);
        return q;
    }
    
    public static TypedQuery<UsedTime> UsedTime.findUsedTimesByOwner(AppUser owner, String sortFieldName, String sortOrder) {
        if (owner == null) throw new IllegalArgumentException("The owner argument is required");
        EntityManager em = UsedTime.entityManager();
        String jpaQuery = "SELECT o FROM UsedTime AS o WHERE o.owner = :owner";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<UsedTime> q = em.createQuery(jpaQuery, UsedTime.class);
        q.setParameter("owner", owner);
        return q;
    }
    
}
