// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.ut.intime.domain;

import ee.ut.intime.domain.AppUser;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect AppUser_Roo_Finder {
    
    public static Long AppUser.countFindAppUsersByOpenIdIdentifier(String openIdIdentifier) {
        if (openIdIdentifier == null || openIdIdentifier.length() == 0) throw new IllegalArgumentException("The openIdIdentifier argument is required");
        EntityManager em = AppUser.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AppUser AS o WHERE o.openIdIdentifier = :openIdIdentifier", Long.class);
        q.setParameter("openIdIdentifier", openIdIdentifier);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AppUser.countFindAppUsersByUsername(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = AppUser.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AppUser AS o WHERE o.username = :username", Long.class);
        q.setParameter("username", username);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<AppUser> AppUser.findAppUsersByOpenIdIdentifier(String openIdIdentifier) {
        if (openIdIdentifier == null || openIdIdentifier.length() == 0) throw new IllegalArgumentException("The openIdIdentifier argument is required");
        EntityManager em = AppUser.entityManager();
        TypedQuery<AppUser> q = em.createQuery("SELECT o FROM AppUser AS o WHERE o.openIdIdentifier = :openIdIdentifier", AppUser.class);
        q.setParameter("openIdIdentifier", openIdIdentifier);
        return q;
    }
    
    public static TypedQuery<AppUser> AppUser.findAppUsersByOpenIdIdentifier(String openIdIdentifier, String sortFieldName, String sortOrder) {
        if (openIdIdentifier == null || openIdIdentifier.length() == 0) throw new IllegalArgumentException("The openIdIdentifier argument is required");
        EntityManager em = AppUser.entityManager();
        String jpaQuery = "SELECT o FROM AppUser AS o WHERE o.openIdIdentifier = :openIdIdentifier";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<AppUser> q = em.createQuery(jpaQuery, AppUser.class);
        q.setParameter("openIdIdentifier", openIdIdentifier);
        return q;
    }
    
    public static TypedQuery<AppUser> AppUser.findAppUsersByUsername(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = AppUser.entityManager();
        TypedQuery<AppUser> q = em.createQuery("SELECT o FROM AppUser AS o WHERE o.username = :username", AppUser.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<AppUser> AppUser.findAppUsersByUsername(String username, String sortFieldName, String sortOrder) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = AppUser.entityManager();
        String jpaQuery = "SELECT o FROM AppUser AS o WHERE o.username = :username";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<AppUser> q = em.createQuery(jpaQuery, AppUser.class);
        q.setParameter("username", username);
        return q;
    }
    
}
